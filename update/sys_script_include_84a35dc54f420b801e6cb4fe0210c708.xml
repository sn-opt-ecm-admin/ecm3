<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_opt_ecm.RootCauseDependencyChecker</api_name>
        <client_callable>true</client_callable>
        <description/>
        <name>RootCauseDependencyChecker</name>
        <script><![CDATA[var RootCauseDependencyChecker = Class.create();
RootCauseDependencyChecker.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

	table : 'x_opt_ecm_rca',
	debug: false,
	
	checkHasDependencies: function() {

		var parentValue = this.getParameter("sysparm_value");
		
		var choiceCount = new GlideAggregate('sys_choice');
		choiceCount.addQuery('name', this.table);
		choiceCount.addQuery('inactive', false);
		choiceCount.addQuery('dependent_value', parentValue);
		choiceCount.addAggregate('COUNT');
		choiceCount.query();
		
		var dependentChoices = 0;
		if (choiceCount.next()) {
			dependentChoices = choiceCount.getAggregate('COUNT');
		}
		
		return (dependentChoices > 0);
	},
	
	checkRequirements: function() {
		
		var result = {
			has_dependencies : false,
			has_child_other : false
		};
		
		var parentValue = this.getParameter("sysparm_value");
		var fieldnum = this.getParameter("sysparm_fieldname");

		var choiceCount = new GlideRecord('sys_choice');
		choiceCount.addQuery('name', 'x_opt_ecm_rca');
		choiceCount.addQuery('element', fieldnum);
		choiceCount.addQuery('inactive', false);
		choiceCount.query();

		var dependencyMap = [];
		
		while (choiceCount.next()) {

			// load our map
			var dependency = {};
			dependency.value = choiceCount.getValue('value');
			dependency.dependent_value = choiceCount.getValue('dependent_value');
			dependencyMap.push(dependency);
		}
		
		var dependencies = this._findChildren(parentValue, dependencyMap);
		if (dependencies.length > 0) {

			result.has_dependencies = true;

			for (var i = 0; i < dependencies.length; i++) {

				var numberOfDependencyChildren = this._findChildren(dependencies[i].value, dependencyMap).length;
				if (numberOfDependencyChildren == 0) {
					result.has_child_other = true;
				}
			}
		}

		if (this.debug) {
			gs.info('Value {0} had result {1}', parentValue, JSON.stringify(result));
		}
		
		return JSON.stringify(result);
	},
	
	_findChildren : function(testValue, dependencyMap) {
		
		return dependencyMap.filter(function(element) {
			return element.dependent_value == testValue;
		});
	},
	
	type: 'RootCauseDependencyChecker'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>john.daniel</sys_created_by>
        <sys_created_on>2017-10-24 20:59:29</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>84a35dc54f420b801e6cb4fe0210c708</sys_id>
        <sys_mod_count>31</sys_mod_count>
        <sys_name>RootCauseDependencyChecker</sys_name>
        <sys_package display_value="Escalated Complaint Management" source="x_opt_ecm">d1cfc3484f680b001e6cb4fe0210c7b7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Escalated Complaint Management">d1cfc3484f680b001e6cb4fe0210c7b7</sys_scope>
        <sys_update_name>sys_script_include_84a35dc54f420b801e6cb4fe0210c708</sys_update_name>
        <sys_updated_by>msaikira</sys_updated_by>
        <sys_updated_on>2018-12-14 11:00:23</sys_updated_on>
    </sys_script_include>
</record_update>
