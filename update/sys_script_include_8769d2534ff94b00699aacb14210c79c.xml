<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_opt_ecm.OptumRxIntegration</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>OptumRxIntegration</name>
        <script><![CDATA[/** V E R A C I T Y ~ www.meetveracity.com ~ **
 * Author: Todd Fudala ~ tfudala@meetveracity.com

 * Description: Class to manage OptumRX integrations for the ECM application

 */
gs.include("IntegrationLogUtil");

var OptumRxIntegration = Class.create();
OptumRxIntegration.prototype = {

    // CONSTANTS

    HTTPSTATUS_SUCCESS: "200", // Indicates a successful HTTP post

    LOGSOURCE: "OptumRxIntegration.", // Log Source
    LOGHEADER: "{0}{1} >[{2}]:\r\n{3}", // Standard prefix
    LOG_INFO: "INFO",
    LOG_ERROR: "ERROR",
    LOG_DEBUG: "DEBUG",
    //EXAMPLE: "gs.error(this.LOGHEADER , this.LOGSOURCE , functName, this.LOG_ERROR, message);"


    initialize: function() {

        this.logger = new IntegrationLogUtil();

    },
    /** V E R A C I T Y ~ www.meetveracity.com ~ **
 		* Author: Todd Fudala ~ tfudala@meetveracity.com

 		* Description: Calls the OptumRx Member service

    * Returns: the search response from the OptumRx REST service
 		*/
    optumRxMemberSearch: function(search_values) {
        var functName = "optumRxMemberSearch()";
        // Refresh the OAuth token
        var token = this.getOptumRxToken();
        var rest_message = "x_opt_ecm.OptumRxMemberSearch";
        var rest_method = "MemberSearch";

        //gs.info(this.LOGHEADER, this.LOGSOURCE, functName, this.LOG_INFO, token);

        try {
            if (token) {

                var r = new sn_ws.RESTMessageV2(rest_message, rest_method);
                r.setEndpoint(gs.getProperty("x_opt_ecm.integration_orx_member_endpoint"));
                r.setStringParameterNoEscape('token', token);
                r.setStringParameterNoEscape('firstName', search_values.firstName);
                r.setStringParameterNoEscape('lastName', search_values.lastName);
                r.setStringParameterNoEscape('city', search_values.city);
                r.setStringParameterNoEscape('state', search_values.state);
                r.setStringParameterNoEscape('dateOfBirth', search_values.dateOfBirth);
                r.setStringParameterNoEscape('memberId', search_values.memberId);
                r.setStringParameterNoEscape('effectiveDate', search_values.effectiveDate);
                r.setStringParameterNoEscape('externalCorrelationId', search_values.caseNumber);
                // Fixed Values
                r.setStringParameterNoEscape('consumerType', 'CA');
                r.setStringParameterNoEscape('PBMUserID', 'UMR_USER');
                r.setStringParameterNoEscape('consumerAppId', 'ECM');
                r.setStringParameterNoEscape('consumerAppType', 'IA');


                // ### CALL THE SERVICE ### //
                var response = r.execute();
                var responseBody = response.getBody();
                var requestBody = r.getRequestBody();
                var httpStatus = response.getStatusCode();
                var endpoint = r.getEndpoint();
                var service_call_status = JSON.parse(responseBody).searchOutputMetaData.respCode;
                if (gs.nil(service_call_status)) {
                    service_call_status = "500";
                }
                var method = rest_message + "." + rest_method;
                var sys_id = search_values.sysId;

                // #### ALWAYS log to the dedicated integration log table for tracking and debugging ####
                this.logger.log(method, requestBody, responseBody, httpStatus, service_call_status, sys_id, endpoint);
                // ####
                gs.debug(this.LOGHEADER, this.LOGSOURCE, functName, this.LOG_DEBUG, "The service call httpStatus was: " + httpStatus);

                return responseBody;

            } else {
                throw new Error("The call failed requesting a valid OAuth Token, see Integration Log for details.");
            }
        } catch (e) {

            gs.error(this.LOGHEADER, this.LOGSOURCE, functName, this.LOG_ERROR, e);
        }
    },

    /** V E R A C I T Y ~ www.meetveracity.com ~ **
    * Author: Todd Fudala ~ tfudala@meetveracity.com

    * Description: Calls the OptumRx Claims service

    * Returns: the search response from the OptumRx REST service
    */
    optumRxClaimSearch: function(search_values) {
        var functName = "optumRxClaimSearch()";
        var rest_message = "x_opt_ecm.OptumRxClaimSearch";
        var rest_method = "ClaimSearch";
        // Refresh the OAuth token
        var token = this.getOptumRxToken();
        //gs.info(this.LOGHEADER, this.LOGSOURCE, functName, this.LOG_INFO, token);

        try {
            if (token) {

                var r = new sn_ws.RESTMessageV2(rest_message, rest_method);
                r.setEndpoint(gs.getProperty("x_opt_ecm.integration_orx_claims_endpoint"));
                r.setStringParameterNoEscape('token', token);
                r.setStringParameterNoEscape('externalCorrelationId', search_values.caseNumber);
                r.setStringParameterNoEscape('memberId', search_values.memberId);
                r.setStringParameterNoEscape('carrierId', search_values.carrierId);
                r.setStringParameterNoEscape('accountId', search_values.accountId);
                r.setStringParameterNoEscape('groupId', search_values.groupId);
                r.setStringParameterNoEscape('memberKey', search_values.memberKey);
                r.setStringParameterNoEscape('rXClaimInstanceId', search_values.rXClaimInstanceId);
                r.setStringParameterNoEscape('fillDateFrom', search_values.fillDateFrom);
                r.setStringParameterNoEscape('fillDateThru', search_values.fillDateThru);

                // Fixed Values
                r.setStringParameterNoEscape('consumerType', 'CA'); //Member or Customer Account
                r.setStringParameterNoEscape('PBMUserID', 'UMR_USER');
                r.setStringParameterNoEscape('consumerAppId', 'UMR');
                r.setStringParameterNoEscape('consumerAppType', 'IA');

                // ### CALL THE SERVICE ### //
                var response = r.execute();
                var responseBody = response.getBody();
                var requestBody = r.getRequestBody();
                var httpStatus = response.getStatusCode();
                var endpoint = r.getEndpoint();
                var service_call_status = JSON.parse(responseBody).searchOutputMetaData.respCode;
                if (gs.nil(service_call_status)) {
                    service_call_status = "500";
                }
                var method = rest_message + "." + rest_method;
                var sys_id = search_values.sysId;

                // #### ALWAYS log to the dedicated integration log table for tracking and debugging ####
                this.logger.log(method, requestBody, responseBody, httpStatus, service_call_status, sys_id, endpoint);
                // ####
                gs.debug(this.LOGHEADER, this.LOGSOURCE, functName, this.LOG_DEBUG, "The service call httpStatus was: " + httpStatus);

                return responseBody;

            } else {
                throw new Error("The call failed requesting a valid OAuth Token, see Integration Log for details.");
            }
        } catch (e) {

            gs.error(this.LOGHEADER, this.LOGSOURCE, functName, this.LOG_ERROR, e);
        }
    },
    /** V E R A C I T Y ~ www.meetveracity.com ~ **
 		* Author: Todd Fudala ~ tfudala@meetveracity.com

 		* Description: Calls the OptumRx oAuth Token service

 		* Returns: the access token to call OptumRx REST service resources
 		*/
    getOptumRxToken: function() {
        var functName = "getOptumRxToken()";

        try {
            var r = new sn_ws.RESTMessageV2('x_opt_ecm.OptumRxToken', 'GetToken');
            r.setEndpoint(gs.getProperty("x_opt_ecm.integration_orx_token_endpoint"));
            // ### CALL THE SERVICE ### //
            var response = r.execute();
            var responseBody = response.getBody();
            var requestBody = r.getRequestBody();
            var httpStatus = response.getStatusCode();
            var endpoint = r.getEndpoint();
            var service_call_status = "";
            var method = "OptumRxToken.GetToken";

            // #### ALWAYS log to the dedicated integration log table for tracking and debugging ####
            this.logger.log(method, requestBody, responseBody, httpStatus, service_call_status, "", endpoint);
            // ####


            if (httpStatus == this.HTTPSTATUS_SUCCESS) {
                gs.debug(this.LOGHEADER, this.LOGSOURCE, functName, this.LOG_DEBUG, responseBody);
                return JSON.parse(responseBody).access_token;
            } else {
                throw new Error(functName + " failed, check the Integration Log for details.");
            }

        } catch (e) {

            gs.error(this.LOGHEADER, this.LOGSOURCE, functName, this.LOG_ERROR, e);
            return null;
        }

    },

    /** V E R A C I T Y ~ www.meetveracity.com ~ **
 		* Author: Todd Fudala ~ tfudala@meetveracity.com

 		* Description: Add the claims to the ECM Claims table

 		* Returns: the sys_ids of the created claim records
 		*/
    insertClaimsForCase: function(inputs) {
        var functName = "insertClaimsForCase()";
        try {
            var fields = {};
            var claims = JSON.parse(inputs.claims);
            var sys_ids = [];

            gs.debug(this.LOGHEADER, this.LOGSOURCE, functName, this.LOG_DEBUG, JSON.stringify(inputs));

            var gr = new GlideRecord('x_opt_ecm_claims');

            for (var c in claims) {
                gr.initialize();
                fields.parent = inputs.sysId; //sys_id of the ECM Case these claims are related to
                fields.account_id = claims[c].accountId;
                fields.carrier_id = claims[c].carrierId;
                fields.claim_number = claims[c].claimNumber;
                fields.claim_status = claims[c].claimStatus;
                fields.fill_date = claims[c].fillDate;
                fields.generic_product_id = claims[c].gpi;
                fields.group_id = claims[c].groupId;
                fields.member_id = claims[c].memberId;
                fields.patient_pay_amount = claims[c].patientPayAmount;
                fields.plan_pay_amount = claims[c].planPayAmount;
                fields.product_id = claims[c].productId;
                fields.product_name = claims[c].productNameAbbreviation;
                // Check for a reject code before accessing the message array object
                if (!gs.nil(claims[c].rejectCode[0])) {
                    fields.reject_code = claims[c].rejectCode[0];
                    fields.reject_message = claims[c].rejectMessage[0].message;
                }

                for (var f in fields) {
                    gr[f] = fields[f];
                }
                sys_ids.push(gr.insert());
            }


            return JSON.stringify(sys_ids);


        } catch (e) {
            gs.error(this.LOGHEADER, this.LOGSOURCE, functName, this.LOG_ERROR, e);
            return null;
        }


    },

    type: 'OptumRxIntegration'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>todd.fudala</sys_created_by>
        <sys_created_on>2017-10-19 15:34:36</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>8769d2534ff94b00699aacb14210c79c</sys_id>
        <sys_mod_count>107</sys_mod_count>
        <sys_name>OptumRxIntegration</sys_name>
        <sys_package display_value="Escalated Complaint Management" source="x_opt_ecm">d1cfc3484f680b001e6cb4fe0210c7b7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Escalated Complaint Management">d1cfc3484f680b001e6cb4fe0210c7b7</sys_scope>
        <sys_update_name>sys_script_include_8769d2534ff94b00699aacb14210c79c</sys_update_name>
        <sys_updated_by>todd.fudala</sys_updated_by>
        <sys_updated_on>2018-01-16 14:59:31</sys_updated_on>
    </sys_script_include>
</record_update>
