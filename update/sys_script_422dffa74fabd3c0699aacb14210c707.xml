<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_opt_ecm_case</collection>
        <condition>(current.state.changes() || current.assigned_to.changes())</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_opt_ecm_case">complaint_type!=6844f24e4f604300699aacb14210c780^EQ<item display_table="x_opt_ecm_complaint_type" display_value="Inquiry" endquery="false" field="complaint_type" goto="false" newquery="false" operator="!=" or="false" value="6844f24e4f604300699aacb14210c780"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>ECM-Track Case Duration When Assigned</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	/** as written this rule creates and updates state durations when the case is assigned
	and the assigned to or state changes
	*/
	//Build query for metrics related to new state/assigned to
	var metric = new GlideRecord('x_opt_ecm_case_metrics');
	metric.addQuery('case', current.sys_id);
	metric.addQuery('assigned_to', current.assigned_to);
	metric.addQuery('state', current.state.getDisplayValue());
	metric.query();
	//Build query for metrics related to last state/assigned to
	var lastMetric = new GlideRecord('x_opt_ecm_case_metrics');
	lastMetric.addQuery('case', current.sys_id);
	lastMetric.addQuery('assigned_to', previous.assigned_to);
	lastMetric.addQuery('state', previous.state.getDisplayValue());	
	lastMetric.query();
	//If the metric for the last state/assigned to exists
	if(lastMetric.next()){
		//Get the current time
		var now = new GlideDateTime();
		//Get the time when this state/assigned to combination was entered
		var start = new GlideDateTime();
		start.setDisplayValue(lastMetric.start_date.getDisplayValue());
		//Find the duration between the start and the end
		var dur = GlideDateTime.subtract(start, now);
		//Get the duration that is currently stored in the metric
		var currentDur = new GlideDuration();
		currentDur.setValue(lastMetric.case_duration);
		//Add the 2 durations together
		var finalDur = currentDur.add(dur);
		//Store the total duration that this state/assigned to combination has existed
		lastMetric.case_duration = finalDur;
		//Update the metric
		lastMetric.update();
	}
	//If the current state/assigned to pair has never been entered create a metric
	if(!metric.next()){
		createMetric(current);
	}
	//Otherwise update the start field for the metric
	else{
		//Set the start field to the current time
		var cur = new GlideDateTime();
		metric.start_date = cur.getDisplayValue();
		metric.update();
	}
})(current, previous);

function createMetric(current){
	//Get the current time
	var now = new GlideDateTime();
	//Initialize the metric
	var metric = new GlideRecord('x_opt_ecm_case_metrics');
	metric.initialize();
	//Fill information into the initialized metric according to the case and current time
	metric.setValue('case_number', current.number);
	metric.setValue('case', current.sys_id);
	metric.setValue('assigned_to', current.assigned_to);
	metric.setValue('member_first_name', current.member_first_name);
	metric.setValue('member_last_name', current.member_last_name);
	metric.start_date = now.getDisplayValue();
	metric.setValue('priority', current.priority.getDisplayValue());
	metric.setValue('state', current.state.getDisplayValue());
	//Set duration to 0 seconds
	var dur = new GlideDuration();
	dur.setDisplayValue("00:00:00");
	metric.setValue('case_duration', dur);
	//Insert the metric
	metric.insert();
}]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>will.mayes</sys_created_by>
        <sys_created_on>2018-08-02 13:55:15</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>422dffa74fabd3c0699aacb14210c707</sys_id>
        <sys_mod_count>39</sys_mod_count>
        <sys_name>ECM-Track Case Duration When Assigned</sys_name>
        <sys_overrides/>
        <sys_package display_value="Escalated Complaint Management" source="x_opt_ecm">d1cfc3484f680b001e6cb4fe0210c7b7</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Escalated Complaint Management">d1cfc3484f680b001e6cb4fe0210c7b7</sys_scope>
        <sys_update_name>sys_script_422dffa74fabd3c0699aacb14210c707</sys_update_name>
        <sys_updated_by>mike.ward</sys_updated_by>
        <sys_updated_on>2018-09-06 11:08:00</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=422dffa74fabd3c0699aacb14210c707"/>
</record_update>
