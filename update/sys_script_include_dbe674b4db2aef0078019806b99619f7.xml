<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_opt_ecm.ECMCaseTimeCalculator</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>ECMCaseTimeCalculator</name>
        <script><![CDATA[var ECMCaseTimeCalculator = Class.create();
ECMCaseTimeCalculator.prototype = {
	initialize: function() {
	},
	
	/**
	Turn-around calcuation:
	Calculates TAT from OCA/OCR received date to resolved date minus SLA pause times,
	IF those SLAs are defined with a start date as the OCA/OCR received date.
 	*/
	calcTurnAround: function(current) {
		var start = new GlideDateTime();
		if (!gs.nil(current.rca_case))
			start.setDisplayValue(current.rca_start_date.getDisplayValue());
		else
			start.setDisplayValue(current.oca_ocr_received_date_time.getDisplayValue());
		var now = new GlideDateTime();
		if(!gs.nil(current.resolution_date_resolved)){
			now.setDisplayValue(current.resolution_date_resolved.getDisplayValue());
		}
		// in case the case is resolved before the actual scheduled start time, it should be a zero TAT.
		if (now.after(start)) {
			var dur = GlideDateTime.subtract(start, now);
			gs.addInfoMessage(dur);
			var pauseDur = new GlideDuration();
			pauseDur.setDisplayValue("00:00:00");
			var sla = new GlideRecord('task_sla');
			sla.addQuery('task', current.sys_id);
			
			if (!gs.nil(current.rca_case))
				sla.addQuery('sla.set_start_to', 'rca_start_date');
			else
				sla.addQuery('sla.set_start_to', 'oca_ocr_received_date_time');
			
			sla.addQuery('state','!=','cancelled');
			// below query indicates an sla definition with an actual pause time.
			//sla.addNullQuery('sla.duration_type');
			sla.orderByDesc('end_time');
			var durations = [];
			sla.query();
			// technically,
			// if the SLA is defined such that it starts with the OCA/ORA received date
			// and it pauses on awaiting info,
			// then any one SLA can be queried to calculate turn-around time.
			var isPaused=false;
			if (sla.next()){
				if(!gs.nil(sla.pause_duration)){
					var pauseDuration = new GlideDuration();
					pauseDuration.setValue(sla.pause_duration);
					durations.push(pauseDuration);
				}
				if (sla.stage=='paused') {
					isPaused=true;
				}
			}
			if (isPaused) {
				gs.addInfoMessage('The case has task sla records that are paused. Turn-around time calculation may be affected.');
			}
			var finalDur = dur;
			if (durations.length>0) {
				for (var i=0; i<durations.length; i++) {
					finalDur.subtract(durations[i]);
				}
			}
			return finalDur.getValue();
		} else {
			return 0;
		}
	},
	
	type: 'ECMCaseTimeCalculator'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>mike.ward</sys_created_by>
        <sys_created_on>2018-12-20 13:09:11</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>dbe674b4db2aef0078019806b99619f7</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>ECMCaseTimeCalculator</sys_name>
        <sys_package display_value="Escalated Complaint Management" source="x_opt_ecm">d1cfc3484f680b001e6cb4fe0210c7b7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Escalated Complaint Management">d1cfc3484f680b001e6cb4fe0210c7b7</sys_scope>
        <sys_update_name>sys_script_include_dbe674b4db2aef0078019806b99619f7</sys_update_name>
        <sys_updated_by>mike.ward</sys_updated_by>
        <sys_updated_on>2018-12-21 23:39:52</sys_updated_on>
    </sys_script_include>
</record_update>
