<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_opt_ecm_case</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_opt_ecm_case">stateCHANGESFROM19^stateCHANGESTO20^EQ<item endquery="false" field="state" goto="false" newquery="false" operator="CHANGESFROM" or="false" value="19"/>
            <item endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="false" value="20"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>ECM-AdvocateReplyToQRRequest</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	AdvocateReplyToQR();
		
	function AdvocateReplyToQR(){
		var advC1 = current.advocate_comments;
// 		gs.addInfoMessage("Advocate Comments: " + advC1);
		var qr = new GlideRecord("x_opt_ecm_quality_review_task");
// 		gs.addInfoMessage("Advocate Comments: " + advC1);
		qr.addQuery('case_number', '=', current.sys_id);
		qr.query();
		while (qr.next()){
// 			gs.addInfoMessage ('found qr');
// 			gs.addInfoMessage(advC1);
			qr.advocate_comments = advC1;
			qr.state = 5;
			
			// set revised due date for SLA
			qr.revised_qr_due_date = new QualityReviewUtils().getQualityReviewDueDate();
			
			qr.update();
		}
	}
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>craig.leonard</sys_created_by>
        <sys_created_on>2017-11-29 15:22:35</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>29fe1d684f72cb001e6cb4fe0210c72b</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>ECM-AdvocateReplyToQRRequest</sys_name>
        <sys_overrides/>
        <sys_package display_value="Escalated Complaint Management" source="x_opt_ecm">d1cfc3484f680b001e6cb4fe0210c7b7</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Escalated Complaint Management">d1cfc3484f680b001e6cb4fe0210c7b7</sys_scope>
        <sys_update_name>sys_script_29fe1d684f72cb001e6cb4fe0210c72b</sys_update_name>
        <sys_updated_by>craig.leonard</sys_updated_by>
        <sys_updated_on>2017-12-01 19:58:13</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=29fe1d684f72cb001e6cb4fe0210c72b"/>
</record_update>
