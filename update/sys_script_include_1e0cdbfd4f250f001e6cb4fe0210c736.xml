<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_opt_ecm.ORSIntegration</api_name>
        <client_callable>false</client_callable>
        <description>Class to manage integrations for the ECM application</description>
        <name>ORSIntegration</name>
        <script>/** V E R A C I T Y ~ www.meetveracity.com ~ **&#13;
 * Author: Todd Fudala ~ tfudala@meetveracity.com&#13;
&#13;
 * Description: Class to manage ORS integrations for the ECM application&#13;
&#13;
 */&#13;
&#13;
gs.include("IntegrationLogUtil");&#13;
&#13;
var ORSIntegration = Class.create();&#13;
ORSIntegration.prototype = {&#13;
&#13;
    // CONSTANTS&#13;
&#13;
    HTTPSTATUS_SUCCESS: "200", // Indicates a successful HTTP post of a SOAP Message&#13;
    // ORS Codes&#13;
    INSERT: "N", // (N)ew&#13;
    UPDATE: "O", // (O)wner&#13;
    OPEN: "O", // (O)pen&#13;
    CLOSED: "C", // (C)losed&#13;
    PHONE: "P", // (P)hone&#13;
    MAIL: "M", // (M)ail&#13;
    LOGSOURCE: "ORSIntegration.", // Log Source&#13;
    LOGHEADER: "{0}{1} &gt;[{2}]:\r\n{3}", // Standard prefix&#13;
    LOG_INFO: "INFO",&#13;
    LOG_ERROR: "ERROR",&#13;
    LOG_DEBUG: "DEBUG",&#13;
    //EXAMPLE: "gs.error(this.LOGHEADER , this.LOGSOURCE , functName, this.LOG_ERROR, message);"&#13;
&#13;
    initialize: function() {&#13;
        this.logger = new IntegrationLogUtil();&#13;
    },&#13;
&#13;
    /** V E R A C I T Y ~ www.meetveracity.com ~ **&#13;
 		* Author: Todd Fudala ~ tfudala@meetveracity.com&#13;
&#13;
 		* Description: Outbound SOAP API call to ORS&#13;
&#13;
 		* Parameters:&#13;
 		* glide_record: the current record&#13;
 		* insert_or_update_constant: this.INSERT or this.UPDATE, this controls whether we are opening an issue or closing it&#13;
&#13;
 		*/&#13;
    callORS: function(glide_record, insert_or_update_constant) {&#13;
        var functName = "callORS()";&#13;
        var gr = new GlideRecord();&#13;
        var soap_message = "x_opt_ecm.CreateOrUpdateIssueV13";&#13;
        var soap_method = "invokeService";&#13;
        gr = glide_record;&#13;
&#13;
        // Ternaries&#13;
        // If this is an INSERT set the correct code&#13;
        var insert_or_update = (insert_or_update_constant == this.INSERT) ? this.INSERT : this.UPDATE;&#13;
&#13;
        // If this is an INSERT then we are opening the issue in ORS (Case==WIP) otherwise we are closing it (Case==Resolved)&#13;
        var open_or_closed = (insert_or_update_constant == this.INSERT) ? this.OPEN : this.CLOSED;&#13;
&#13;
        // Handle Contact is Member mappings&#13;
        var m_member_number, m_group_number, m_policy_number, m_first_name, m_last_name, memberNumberLength = 0;&#13;
&#13;
        if (gr.contact_is_member) {&#13;
            this.echo("Contact is the Member, using contact_number");&#13;
            //m_member_number = gr.contact_number.toString();&#13;
            // US1131063 - Change the member number to the SSN value&#13;
            m_member_number = gr.contact_ssn.toString();&#13;
            m_group_number = gr.contact_group_number.toString();&#13;
            m_first_name = gr.contact_first_name.toString();&#13;
            m_last_name = gr.contact_last_name.toString();&#13;
            m_policy_number = gr.contact_policy_number.toString();&#13;
        } else {&#13;
            this.echo("Member is the Member, using member_number");&#13;
            //m_member_number = gr.member_number.toString();&#13;
            // US1131063 - Change the member number to the SSN value&#13;
            m_member_number = gr.member_ssn.toString();&#13;
            m_group_number = gr.member_group_number.toString();&#13;
            m_first_name = gr.member_first_name.toString();&#13;
            m_last_name = gr.member_last_name.toString();&#13;
            m_policy_number = gr.member_policy_number.toString();&#13;
        }&#13;
        memberNumberLength = m_member_number.length; // For later testing&#13;
&#13;
        // Handle Contact is Patient&#13;
        var p_first_name, p_last_name;&#13;
        if (gr.contact_is_member) {&#13;
            p_first_name = gr.contact_first_name.toString();&#13;
            p_last_name = gr.contact_last_name.toString();&#13;
        } else {&#13;
            p_first_name = gr.member_first_name.toString();&#13;
            p_last_name = gr.member_last_name.toString();&#13;
        }&#13;
&#13;
        // If the transaction source is Verbal then (P)hone, if Written then (M)ail&#13;
        var transaction_source;&#13;
        if (gr.transaction_source == 'verbal') {&#13;
            transaction_source = this.PHONE;&#13;
&#13;
        } else if (gr.transaction_source == 'written') {&#13;
            transaction_source = this.MAIL;&#13;
&#13;
        }&#13;
&#13;
        // Set the proper codes based on a create or a modify operation in ORS&#13;
        var created_by = (insert_or_update_constant == this.INSERT) ? "Q" : "";&#13;
        var modified_by = (insert_or_update_constant == this.UPDATE) ? "Q" : "";&#13;
&#13;
&#13;
        try {&#13;
            var s = new sn_ws.SOAPMessageV2(soap_message, soap_method);&#13;
            s.setEndpoint(gs.getProperty("x_opt_ecm.integration_ors_create_update_endpoint"));&#13;
            var method = soap_message + "." + soap_method;&#13;
            // header values&#13;
            s.setStringParameterNoEscape('requestHeader.applicationInstanceName', 'ECM'); // required&#13;
            s.setStringParameterNoEscape('requestHeader.applicationName', 'ECM'); // required&#13;
            s.setStringParameterNoEscape('requestHeader.logLevel', 'DEBUG');&#13;
            s.setStringParameterNoEscape('orsSystemParameter.logonOffice', '888'); // required&#13;
            s.setStringParameterNoEscape('orsSystemParameter.logonId', 'ECM'); // required&#13;
&#13;
            // If the group number is not a number force it to policy number&#13;
            if (isNaN(m_group_number)) {&#13;
                this.echo("Mapping group number to policy number: " + m_group_number);&#13;
                m_policy_number = m_group_number;&#13;
                m_group_number = '';&#13;
            }&#13;
            // Force memberId to Diamond EE ID field by setting eligibilitySourceSystem&#13;
            // Diamond EE ID is (12) alpha-numeric, UPM maps the field when set&#13;
            // If &gt;9 or alpha numeric (NaN) then shift&#13;
            this.echo("The Member ID length is : " + memberNumberLength);&#13;
            if (memberNumberLength &gt; 9 || isNaN(m_member_number)) {&#13;
                this.echo("Settting member.eligibilitySourceSystem to 'D'iamond, the Member ID is " + memberNumberLength + " characters.");&#13;
                s.setStringParameterNoEscape('member.eligibilitySourceSystem', 'D');&#13;
            }&#13;
&#13;
            s.setStringParameterNoEscape('member.memberNumber', m_member_number); // PIC 9 (09)&#13;
            s.setStringParameterNoEscape('member.groupNumber', m_group_number); // PIC 9 (07)&#13;
            s.setStringParameterNoEscape('member.policy', m_policy_number); // PIC X (07)&#13;
            if (gr.contact_relationship == "spouse_relative") {&#13;
                s.setStringParameterNoEscape('member.RelationshipCode', '01'); // Spouse&#13;
                s.setStringParameterNoEscape('member.RelationshipSequenceNumber', '0');&#13;
            }&#13;
            s.setStringParameterNoEscape('memberName.firstName', m_first_name); // PIC X (01)&#13;
            s.setStringParameterNoEscape('memberName.lastName', m_last_name); // PIC X(16)&#13;
            s.setStringParameterNoEscape('dependentName.firstName', p_first_name); // PIC X(12)&#13;
            s.setStringParameterNoEscape('dependentName.lastName', p_last_name); // PIC X(16)&#13;
            s.setStringParameterNoEscape('callerName.firstName', gr.contact_first_name.toString()); // required PIC X(14)&#13;
            s.setStringParameterNoEscape('callerName.lastName', gr.contact_last_name.toString()); // required PIC X(16)&#13;
            // values for the reported case&#13;
            s.setStringParameterNoEscape('issue.status', open_or_closed);&#13;
            s.setStringParameterNoEscape('issue.issueId', gr.ors_issue_id.toString());&#13;
            s.setStringParameterNoEscape('issue.reasonCategory', 'GENERAL');&#13;
            s.setStringParameterNoEscape('issue.reasonCode', 'ECOO');&#13;
            s.setStringParameterNoEscape('issue.reasonType', ''); // Leave blank per Manish Arora&#13;
            s.setStringParameterNoEscape('issue.callHistoryFlag', 'N'); // Default to N per Manish Arora&#13;
            s.setStringParameterNoEscape('issue.caseNumber', gr.number.toString()); // The case number&#13;
            s.setStringParameterNoEscape('issue.createdByApplicationIndicator', created_by); //required&#13;
            s.setStringParameterNoEscape('issue.modifiedByApplicationIndicator', modified_by); //required&#13;
            s.setStringParameterNoEscape('issue.directionCode', 'I'); // (I)ncoming // required&#13;
            s.setStringParameterNoEscape('issue.updateType', insert_or_update); // required&#13;
            s.setStringParameterNoEscape('issue.contactMethodCode', transaction_source); // required&#13;
            s.setStringParameterNoEscape('issue.priority', 'N'); // (N)ormal&#13;
            s.setStringParameterNoEscape('issue.originatorTypeCode', this.mapContactRelationship(gr.contact_relationship)); // required&#13;
            s.setStringParameterNoEscape('issue.hipaaIndicator', 'N'); // required&#13;
&#13;
            // Add the fields that do not map to an ORS tag to a new Intake comment.&#13;
            var newNote = this.getAdHocComment(glide_record);&#13;
            this.addIntakeNoteToECM(newNote, glide_record);&#13;
&#13;
            // 71 byte limit per &lt;comments/&gt; tag - oh mainframes.&#13;
            var max_note = 71;&#13;
            var notes = [];&#13;
            var _this = this;&#13;
            var _note_count = 0;&#13;
            notes = this.getNotes("x_opt_ecm_case", gr.sys_id, "intake_comments", gr.last_ors_update);&#13;
            this.echo("Notes found: " + notes.length);&#13;
            notes.forEach(function(elem) {&#13;
&#13;
                if (elem.length &lt;= max_note) {&#13;
                    s.setStringParameterNoEscape('issue.comments' + _note_count, '&lt;![CDATA[' + elem + ']]&gt;');&#13;
                    ++_note_count;&#13;
                } else {&#13;
                    var split = [];&#13;
                    split = _this.chunkStringToArray(elem, max_note);&#13;
                    split.forEach(function(part) {&#13;
                        s.setStringParameterNoEscape('issue.comments' + _note_count, '&lt;![CDATA[' + part + ']]&gt;');&#13;
                        ++_note_count;&#13;
                    });&#13;
                }&#13;
&#13;
            });&#13;
&#13;
			&#13;
            // ### CALL THE SERVICE ### //&#13;
            var response = s.execute();&#13;
&#13;
            // ### Validate the SOAP call was successful and log results ### //&#13;
            this.validateORS(s, response, gr, method);&#13;
&#13;
        } catch (e) {&#13;
            //var message = ex.getMessage();&#13;
            gs.error(this.LOGHEADER, this.LOGSOURCE, functName, this.LOG_ERROR, e.message);&#13;
            return false;&#13;
        }&#13;
    },&#13;
    /** V E R A C I T Y ~ www.meetveracity.com ~ **&#13;
 		* Author: Todd Fudala ~ tfudala@meetveracity.com&#13;
&#13;
 		* Description: Validates the ORS SOAP response and logs success and failure&#13;
&#13;
 		* Parameters:&#13;
 		* soap: the original soap request message&#13;
 		* soapresponse: the soap response message&#13;
 		* number: the ECM case number this is regarding&#13;
&#13;
 		*/&#13;
    validateORS: function(soap, soapresponse, glide_record, method) {&#13;
        var functName = "validateORS()";&#13;
&#13;
        try {&#13;
            var case_info = "Case # :" + glide_record.number.toString();&#13;
            var error_msg = soapresponse.haveError() ? soapresponse.getErrorMessage() : null;&#13;
            var status = soapresponse.getStatusCode();&#13;
            var endpoint = soap.getEndpoint();&#13;
            var responseBody = soapresponse.getBody();&#13;
            var requestBody = soap.getRequestBody();&#13;
            var doc = new XMLDocument2();&#13;
            doc.parseXML(responseBody); // Load XML&#13;
            var valid_doc = doc.isValid(); // Validate&#13;
            var success_msg = "";&#13;
            //this.echo("The document is valid? : " + valid_doc + " The document is not empty? : " + gs.nil(doc));&#13;
&#13;
            // First test for systemic success, then functional success in the ORS response&#13;
            if (status == this.HTTPSTATUS_SUCCESS &amp;&amp; !soapresponse.haveError()) {&#13;
                if (valid_doc &amp;&amp; !gs.nil(doc)) {&#13;
                    // We can read the document if its valid and not null, now check for internal errors in the document&#13;
&#13;
                    // Check for Fault Response&#13;
                    var fault_error = doc.getNodeText("//faultcode"); // Type of fault&#13;
                    var fault_msg = doc.getNodeText("//faultstring"); // Fault description&#13;
&#13;
                    // Check for Service Call Response or Fault, some Faults do not return serviceCallStatus&#13;
                    var service_call_status = (gs.nil(fault_error)) ? doc.getNodeText("//serviceCallStatus") : "FAULT"; // Service call status&#13;
                    /*var status_message_level = doc.getNodeText("//statusMessageLevel"); // Service call status&#13;
                    var message_type = doc.getNodeText("//messageType"); // Service call status;&#13;
                    var status_message = doc.getNodeText("//statusMessage"); // Service call status&#13;
                    var status_origin = doc.getNodeText("//statusOrigin"); // Service call status*/&#13;
&#13;
                    // Check for Success&#13;
                    var ors_issue = doc.getNodeText("//issueId"); // This indicates success creating a new ORS Issue&#13;
                    var ors_status = doc.getNodeText("//status"); // The status of the issue in ORS&#13;
&#13;
                    // #### ALWAYS log to the dedicated integration log table for tracking and debugging ####&#13;
                    this.logger.log(method, requestBody, responseBody, status, service_call_status, glide_record.sys_id, endpoint);&#13;
                    // ####&#13;
&#13;
&#13;
                    if (!gs.nil(fault_error)) {&#13;
                        //Something in the API went wrong, log.&#13;
                        throw new Error("The ORS Service encountered a FAULT, see Integration Log for details, " + case_info);&#13;
                    } else if (service_call_status == "ERROR" || service_call_status == "FAULT") {&#13;
                        // Returned an Error code message, log.&#13;
                        throw new Error("The ORS Service returned an ERROR or FAULT message, see Integration Log for details, " + case_info);&#13;
                    } else if (gs.nil(ors_issue)) {&#13;
                        //Looks like success but an issue id was not returned, log.&#13;
                        throw new Error("An ORS Issue ID was not returned for this call, see Integration Log for details, " + case_info);&#13;
                    } else if (!gs.nil(ors_issue)) {&#13;
                        //Successful ORS Issue creation&#13;
                        success_msg = case_info + " successfully sent to ORS, Issue # " + ors_issue;&#13;
&#13;
                        this.notateCase(success_msg, glide_record, ors_issue);&#13;
                        gs.debug(this.LOGHEADER, this.LOGSOURCE, functName, this.LOG_DEBUG, success_msg);&#13;
&#13;
                    }&#13;
                } else {&#13;
                    throw new Error("The SOAP Response message was not valid, see Integration Log for details.");&#13;
                }&#13;
            } else {&#13;
                throw new Error("The SOAP call failed, HTTP response code: &gt;[" +&#13;
                    status + "], SNC error code: [" + error_msg + "], SOAP response:\r\n " + responseBody); //Systemic error&#13;
            }&#13;
&#13;
&#13;
&#13;
        } catch (e) {&#13;
            gs.error(this.LOGHEADER, this.LOGSOURCE, functName, this.LOG_ERROR, e.message);&#13;
&#13;
        }&#13;
&#13;
    },&#13;
    /** V E R A C I T Y ~ www.meetveracity.com ~ **&#13;
 		* Author: Todd Fudala ~ tfudala@meetveracity.com&#13;
&#13;
 		* Description: Logs and returns the input for testing purposes&#13;
&#13;
 		* Parameters:&#13;
 		* input: input message&#13;
&#13;
 		* Returns: the input message&#13;
 		*/&#13;
    echo: function(input) {&#13;
        var functName = "echo()";&#13;
        gs.info(this.LOGHEADER, this.LOGSOURCE, functName, this.LOG_INFO, input);&#13;
        return input;&#13;
    },&#13;
    /** V E R A C I T Y ~ www.meetveracity.com ~ **&#13;
 		* Author: Todd Fudala ~ tfudala@meetveracity.com&#13;
&#13;
 		* Description: Chunks a string to an array of fixed bytes&#13;
&#13;
 		* Parameters:&#13;
 		* str: the string to chuck&#13;
 		* maxPartSize: the max size of the chunk&#13;
&#13;
 		* Returns: the chunked string in an array&#13;
 		*/&#13;
    chunkStringToArray: function(str, maxPartSize) {&#13;
&#13;
        var chunkArr = [];&#13;
        var leftStr = str;&#13;
        var i = 0;&#13;
        while (leftStr.length &gt; 0) {&#13;
&#13;
            chunkArr.push(leftStr.substring(0, maxPartSize));&#13;
            leftStr = leftStr.substring(maxPartSize, leftStr.length);&#13;
        }&#13;
&#13;
        return chunkArr;&#13;
    },&#13;
&#13;
&#13;
    /** V E R A C I T Y ~ www.meetveracity.com ~ **&#13;
 		* Author: Todd Fudala ~ tfudala@meetveracity.com&#13;
&#13;
 		* Description: maps Contact Relationship choice list values to ORS codes&#13;
&#13;
    * Parameters:&#13;
    * contact_relationship: One of the defined choice values&#13;
&#13;
 		* Returns: the mapped ORS code&#13;
 		*/&#13;
    mapContactRelationship: function(contact_relationship) {&#13;
        var result = "EM"; //Default to EM in case the requested item does not exist&#13;
&#13;
        //JSON Object to hold the mapping&#13;
        var map = {&#13;
            "agent_broker": "CB",&#13;
            "applicant": "PM",&#13;
            "attorney": "LA",&#13;
            "attorney_general": "RC",&#13;
            "billing_collection_agency": "CA",&#13;
            "insured_participant": "EM",&#13;
            "legislator": "RH",&#13;
            "non_insurance_customer": "NM",&#13;
            "other": "OT",&#13;
            "physician_provider_service": "PR",&#13;
            "policyowner_trustee_group": "BE",&#13;
            "regulator": "RT",&#13;
            "spouse_relative": "FF",&#13;
            "third_party": "OI",&#13;
            "": "EM"&#13;
&#13;
        };&#13;
&#13;
        var map_value = map[contact_relationship];&#13;
        this.echo("The contact method is : '" + contact_relationship + "', map value is : " + map_value);&#13;
        // Test in case the incoming value is not found&#13;
        if (typeof map_value === "undefined") {&#13;
            this.echo("The Contact Relationship mapped value was not found, returning default value " + result);&#13;
            return result;&#13;
        } else {&#13;
            return map_value;&#13;
        }&#13;
&#13;
&#13;
    },&#13;
&#13;
    /** V E R A C I T Y ~ www.meetveracity.com ~ **&#13;
 		* Author: Todd Fudala ~ tfudala@meetveracity.com&#13;
&#13;
 		* Description: notates the Case with the ORS Issue ID and field values&#13;
&#13;
    * Parameters:&#13;
    * message: The message to add to work notes&#13;
    * glide_record: The glide record we are working on&#13;
    * issue_id: The ORS Issue ID&#13;
 		*/&#13;
    notateCase: function(message, glide_record, issue_id) {&#13;
        glide_record.ors_issue_id = issue_id;&#13;
        glide_record.last_ors_update = new GlideDateTime();&#13;
        glide_record.work_notes = message;&#13;
        glide_record.update();&#13;
    },&#13;
&#13;
    /** V E R A C I T Y ~ www.meetveracity.com ~ **&#13;
 		* Author: Todd Fudala ~ tfudala@meetveracity.com&#13;
&#13;
 		* Description: notates the Case with a message&#13;
&#13;
    * Parameters:&#13;
    * message: The message to add to work notes&#13;
    * glide_record: The glide record we are working on&#13;
 		*/&#13;
    addIntakeNoteToECM: function(message, glide_record) {&#13;
        glide_record.intake_comments = message;&#13;
        glide_record.update();&#13;
    },&#13;
&#13;
    /** V E R A C I T Y ~ www.meetveracity.com ~ **&#13;
 		* Author: Todd Fudala ~ tfudala@meetveracity.com&#13;
&#13;
 		* Description: Retrieves Journal Notes for a specfied element, optionally older than after_date_time&#13;
&#13;
    * Parameters:&#13;
    * table: name of the table where the notes were made&#13;
    * sys_id: the sys_id of the record with the notes&#13;
    * element: the type of note e.g. work_notes, intake_comments&#13;
    * after_date_time: a GlideDateTime value to filter the result set (OPTIONAL)&#13;
&#13;
    * Returns: Array of notes prefixed with &gt; creation date - creation by - element type&#13;
 		*/&#13;
    getNotes: function(table, sys_id, element, after_date_time) {&#13;
        var gr = new GlideRecord("sys_journal_field");&#13;
        var notes = [];&#13;
        gr.addQuery("name", table);&#13;
        gr.addQuery("element", element);&#13;
        gr.addQuery("element_id", sys_id);&#13;
        if (!after_date_time.nil()) {&#13;
            gr.addQuery("sys_created_on", "&gt;", after_date_time);&#13;
        }&#13;
        gr.orderBy("sys_created_on");&#13;
        gr.query();&#13;
        while (gr.next()) {&#13;
            var note = gr.sys_created_on + " - " + gr.sys_created_by + " (" + element + ") - " + gr.value;&#13;
            notes.push(note);&#13;
        }&#13;
&#13;
        return notes;&#13;
&#13;
    },&#13;
&#13;
    /** V E R A C I T Y ~ www.meetveracity.com ~ **&#13;
 		* Author: Todd Fudala ~ tfudala@meetveracity.com&#13;
&#13;
 		* Description: build the message for notating the case&#13;
&#13;
    * Parameters:&#13;
&#13;
    * glide_record: The glide record we are working on&#13;
&#13;
    * Returns: String message&#13;
 		*/&#13;
    getAdHocComment: function(glide_record) {&#13;
        var note = {};&#13;
        var message = "";&#13;
        note.fieldLabels = ["Member ID: ",&#13;
            "Contact ID: ",&#13;
            "OCA/OCR Received: ",&#13;
            "Submission Source: ",&#13;
            "Responsible Dept: ",&#13;
            "Due Date: ",&#13;
            "Resolution Date: "&#13;
        ];&#13;
        note.fieldValues = [glide_record.member_ssn,&#13;
            glide_record.contact_ssn,&#13;
            glide_record.oca_ocr_received_date_time,&#13;
            glide_record.submission_source.getDisplayValue(),&#13;
            glide_record.responsible_department.getDisplayValue(),&#13;
            glide_record.due_date,&#13;
            glide_record.resolution_date_resolved&#13;
        ];&#13;
&#13;
        for (var j = 0; j &lt; note.fieldLabels.length; j++) {&#13;
            message += note.fieldLabels[j] + note.fieldValues[j] + "\n";&#13;
        }&#13;
        return message;&#13;
    },&#13;
&#13;
    type: 'ORSIntegration'&#13;
};&#13;
</script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>todd.fudala</sys_created_by>
        <sys_created_on>2017-10-02 18:45:10</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>1e0cdbfd4f250f001e6cb4fe0210c736</sys_id>
        <sys_mod_count>300</sys_mod_count>
        <sys_name>ORSIntegration</sys_name>
        <sys_package display_value="Escalated Complaint Management" source="x_opt_ecm">d1cfc3484f680b001e6cb4fe0210c7b7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Escalated Complaint Management">d1cfc3484f680b001e6cb4fe0210c7b7</sys_scope>
        <sys_update_name>sys_script_include_1e0cdbfd4f250f001e6cb4fe0210c736</sys_update_name>
        <sys_updated_by>mike.ward</sys_updated_by>
        <sys_updated_on>2018-06-11 20:32:33</sys_updated_on>
    </sys_script_include>
</record_update>
